Scenario,AdvObject,Behavior Description,Behavior Snippet,Geometry Description,Geometry Snippet,Spawn Description,Spawn Snippet,Success
The ego vehicle is driving on a straight road when a pedestrian suddenly crosses from the right front and stops as the ego vehicle approaches.,Pedestrian,The adversarial pedestrian suddenly crosses from the right front and stops as the ego vehicle approaches.,"behavior AdvBehavior():
    do CrossingBehavior(ego, globalParameters.OPT_ADV_SPEED, globalParameters.OPT_ADV_DISTANCE) until (distance from self to egoTrajectory) < globalParameters.OPT_STOP_DISTANCE
    while True:
        take SetWalkingSpeedAction(0)

param OPT_ADV_SPEED = Range(0, 5)
param OPT_ADV_DISTANCE = Range(0, 15)
param OPT_STOP_DISTANCE = Range(0, 1)",A straight road.,"Town = 'Town05'
lane = Uniform(*network.lanes)
egoTrajectory = lane.centerline
egoSpawnPt = OrientedPoint on lane.centerline

ego = Car at egoSpawnPt,
    with regionContainedIn None,
    with blueprint EGO_MODEL",The adversarial agent is on the right front of the ego vehicle on the same straight road for crossing.,"param OPT_GEO_X_DISTANCE = Range(2, 8)
param OPT_GEO_Y_DISTANCE = Range(15, 50)

RightFrontSpawnPt = OrientedPoint right of EgoSpawnPt by globalParameters.OPT_GEO_X_DISTANCE,
    following roadDirection from EgoSpawnPt for globalParameters.OPT_GEO_Y_DISTANCE
AdvAgent = {AdvObject} at RightFrontSpawnPt,
    with heading RightFrontSpawnPt.heading + 90 deg,  # Heading perpendicular to the road, adjusted for right crossing
    with regionContainedIn None,
    with behavior AdvBehavior()",1
 when a pedestrian suddenly crosses from the left front and stops as the ego vehicle approaches.,Pedestrian,The adversarial pedestrian suddenly crosses and stops as the ego vehicle approaches.,"behavior AdvBehavior():
    do CrossingBehavior(ego, globalParameters.OPT_ADV_SPEED, globalParameters.OPT_ADV_DISTANCE) until (distance from self to EgoTrajectory) < globalParameters.OPT_STOP_DISTANCE
    while True:
        take SetWalkingSpeedAction(0)

param OPT_ADV_SPEED = Range(0, 5)
param OPT_ADV_DISTANCE = Range(0, 15)
param OPT_STOP_DISTANCE = Range(0, 1)",A straight road.,"Town = 'Town05'
lane = Uniform(*network.lanes)
EgoTrajectory = lane.centerline
EgoSpawnPt = OrientedPoint on lane.centerline

ego = Car at EgoSpawnPt,
    with regionContainedIn None,
    with blueprint EGO_MODEL",The adversarial agent spawns from the left front of the ego vehicle on the same straight road for crossing.,"param OPT_GEO_X_DISTANCE = Range(-8, -2)  # Negative range for left side
param OPT_GEO_Y_DISTANCE = Range(15, 50)

IntSpawnPt = OrientedPoint following roadDirection from EgoSpawnPt for globalParameters.OPT_GEO_Y_DISTANCE
AdvAgent = {AdvObject} left of IntSpawnPt by globalParameters.OPT_GEO_X_DISTANCE,
    with heading IntSpawnPt.heading - 90 deg,  # Heading perpendicular to the road, adjusted for left crossing
    with regionContainedIn None,
    with behavior AdvBehavior()",1
"The ego vehicle is driving on a straight road when a pedestrian suddenly crosses from the left front, behind a bench, and stops as the ego vehicle approaches.",Pedestrian,The adversarial pedestrian suddenly crosses from the left front and stops as the ego vehicle approaches.,"behavior AdvBehavior():
    do CrossingBehavior(ego, globalParameters.OPT_ADV_SPEED, globalParameters.OPT_ADV_DISTANCE) until (distance from self to EgoTrajectory) < globalParameters.OPT_STOP_DISTANCE
    while True:
        take SetWalkingSpeedAction(0)

param OPT_ADV_SPEED = Range(0, 5)
param OPT_ADV_DISTANCE = Range(0, 15)
param OPT_STOP_DISTANCE = Range(0, 1)",A straight road.,"Town = 'Town05'
lane = Uniform(*network.lanes)
EgoTrajectory = lane.centerline
EgoSpawnPt = OrientedPoint on lane.centerline

ego = Car at EgoSpawnPt,
    with regionContainedIn None,
    with blueprint EGO_MODEL",The adversarial pedestrian spawns from behind a bench on the left front of the ego vehicle.,"param OPT_GEO_BLOCKER_X_DISTANCE = Range(-8, -2)  # Negative range for left side
param OPT_GEO_BLOCKER_Y_DISTANCE = Range(15, 50)
param OPT_GEO_X_DISTANCE = Range(-2, 2)
param OPT_GEO_Y_DISTANCE = Range(2, 6)

LeftFrontSpawnPt = OrientedPoint following roadDirection from EgoSpawnPt for globalParameters.OPT_GEO_BLOCKER_Y_DISTANCE
Blocker = Car left of LeftFrontSpawnPt by globalParameters.OPT_GEO_BLOCKER_X_DISTANCE,
    with heading LeftFrontSpawnPt.heading,
    with regionContainedIn None

SHIFT = globalParameters.OPT_GEO_X_DISTANCE @ globalParameters.OPT_GEO_Y_DISTANCE
AdvAgent = {AdvObject} at Blocker offset along LeftFrontSpawnPt.heading by SHIFT,
    with heading LeftFrontSpawnPt.heading - 90 deg,  # Adjusted for spawning from the left
    with regionContainedIn None,
    with behavior AdvBehavior()",1
The ego vehicle is driving straight through a four-way intersection when a pedestrian suddenly crosses from the left front on the zebra crossing and stops as the ego vehicle approaches.,Pedestrian,The adversarial pedestrian suddenly crosses from the left and stops as the ego vehicle approaches.,"behavior AdvBehavior():
    do CrossingBehavior(ego, globalParameters.OPT_ADV_SPEED, globalParameters.OPT_ADV_DISTANCE) until (distance from self to EgoTrajectory) < globalParameters.OPT_STOP_DISTANCE
    while True:
        take SetWalkingSpeedAction(0)

param OPT_ADV_SPEED = Range(0, 5)
param OPT_ADV_DISTANCE = Range(0, 15)
param OPT_STOP_DISTANCE = Range(0, 1)",A four-way intersection with pedestrian zebra crossings.,"Town = 'Town05'
intersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))
egoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, intersection.maneuvers))
egoInitLane = egoManeuver.startLane
EgoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]
EgoSpawnPt = OrientedPoint in egoInitLane.centerline

ego = Car at EgoSpawnPt,
    with regionContainedIn None,
    with blueprint EGO_MODEL",The adversarial agent is on the left front of the ego vehicle at the zebra crossing.,"param OPT_GEO_X_DISTANCE = Range(-8, -2)  # Adjusted for left side
param OPT_GEO_Y_DISTANCE = Range(-5, 15)

IntSpawnPt = egoManeuver.endLane.centerline[0]  # Start of the end lane centerline
SHIFT = globalParameters.OPT_GEO_X_DISTANCE @ globalParameters.OPT_GEO_Y_DISTANCE
AdvAgent = {AdvObject} at IntSpawnPt offset along IntSpawnPt.heading by SHIFT,
    with heading IntSpawnPt.heading - 90 deg,  # Adjusted for coming from the left
    with regionContainedIn None,
    with behavior AdvBehavior()",1
The ego vehicle is driving straight through a four-way intersection when a pedestrian suddenly crosses from the right front and stops as the ego vehicle approaches.,Pedestrian,The adversarial pedestrian suddenly crosses the road from the right front and stops as the ego vehicle approaches.,"behavior AdvBehavior():
    do CrossingBehavior(ego, globalParameters.OPT_ADV_SPEED, globalParameters.OPT_ADV_DISTANCE) until (distance from self to EgoTrajectory) < globalParameters.OPT_STOP_DISTANCE
    while True:
        take SetWalkingSpeedAction(0)

param OPT_ADV_SPEED = Range(0, 5)
param OPT_ADV_DISTANCE = Range(0, 15)
param OPT_STOP_DISTANCE = Range(0, 1)",The ego vehicle drives straight through a four-way intersection.,"Town = 'Town05'
intersection = Uniform(*filter(lambda i: i.is4Way and not i.isSignalized, network.intersections))
egoInitLane = Uniform(*intersection.incomingLanes)
egoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))
EgoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]
EgoSpawnPt = OrientedPoint in egoManeuver.startLane.centerline

# Setting up the ego vehicle at the initial position
ego = Car at EgoSpawnPt,
    with regionContainedIn None,
    with blueprint EGO_MODEL

require 10 <= (distance to intersection) <= 40",The adversarial pedestrian crosses from the right front of the ego vehicle at the intersection.,"# Defining adversarial maneuvers as those conflicting with the ego's straight path
advManeuvers = filter(lambda i: i.type == ManeuverType.RIGHT_TURN, egoManeuver.conflictingManeuvers)
advManeuver = Uniform(*advManeuvers)
advTrajectory = [advManeuver.startLane, advManeuver.connectingLane, advManeuver.endLane]
advSpawnPt = advManeuver.connectingLane.centerline[0]  # Initial point on the connecting lane's centerline
IntSpawnPt = advManeuver.connectingLane.centerline.start  # Start of the connecting lane centerline

param OPT_GEO_Y_DISTANCE = Range(-10, 10)
# Setting up the adversarial agent
AdvAgent = {AdvObject} following roadDirection from IntSpawnPt for globalParameters.OPT_GEO_Y_DISTANCE,
    with heading IntSpawnPt.heading,
    with regionContainedIn None,
    with behavior AdvBehavior()

# Requirements to ensure the adversarial agent's relative position and trajectory are correctly aligned with the scenario's needs
require 160 deg <= abs(RelativeHeading(adversary)) <= 180 deg
require any([AdvAgent.position in traj for traj in [advManeuver.startLane, advManeuver.connectingLane, advManeuver.endLane]])",1
